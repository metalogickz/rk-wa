// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API
const API_BASE_URL = '/api';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
function checkAuth() {
  const token = localStorage.getItem('authToken');
  if (!token) {
    window.location.href = '/login';
    return false;
  }
  return true;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function getAuthToken() {
  return localStorage.getItem('authToken');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async function loadUserInfo() {
  try {
    const userData = await fetchAPI('/auth/me');

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
    const userInfoElement = document.getElementById('user-info');
    if (userInfoElement) {
      userInfoElement.textContent = userData.firstName || userData.email;
    }

    return userData;
  } catch (error) {
    console.error('Error loading user info:', error);
    if (error.status === 401) {
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
      localStorage.removeItem('authToken');
      window.location.href = '/login';
    }
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
async function fetchAPI(endpoint, options = {}, handleAccepted = false) {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ª–µ—à–∞ –≤ –Ω–∞—á–∞–ª–µ –ø—É—Ç–∏
  if (!endpoint.startsWith('/')) {
    endpoint = '/' + endpoint;
  }

  // –ü–æ–ª–Ω—ã–π URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
  const url = `/api${endpoint}`;

  // –ë–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const headers = {
    'Content-Type': 'application/json',
    ...options.headers
  };

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
  const token = getAuthToken();
  if (token) {
    headers['Authorization'] = `Bearer ${token}`;
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
  const fetchOptions = {
    ...options,
    headers
  };

  try {
    const response = await fetch(url, fetchOptions);

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ 202 (Accepted)
    if (response.status === 202 && handleAccepted) {
      return {
        status: 202,
        data: await response.json()
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
    if (!response.ok) {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
      let errorMessage = 'API request failed';
      try {
        const errorData = await response.json();
        errorMessage = errorData.error || errorMessage;
      } catch (e) {
        // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—Å—Ç
        errorMessage = response.statusText;
      }

      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      const error = new Error(errorMessage);
      error.status = response.status;
      error.response = response;
      throw error;
    }

    // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –∏ —ç—Ç–æ –Ω–µ HEAD –∏–ª–∏ DELETE –∑–∞–ø—Ä–æ—Å,
    // –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON
    if (options.method !== 'HEAD' && options.method !== 'DELETE') {
      return await response.json();
    }

    return true;
  } catch (error) {
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —ç—Ç–æ –Ω–µ –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    if (error.status === 401 && !endpoint.includes('/auth/')) {
      localStorage.removeItem('authToken');
      window.location.href = '/login';
    }

    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è QR-–∫–æ–¥–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞ 202
async function getQrCode(instanceId, onGenerating = null, maxRetries = 5) {
  try {
    // –î–∏—Ä–µ–∫—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º fetch, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ç—É—Å—É –æ—Ç–≤–µ—Ç–∞
    const response = await fetch(`/api/instances/${instanceId}/qr`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${getAuthToken()}`
      }
    });

    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å 202, –∑–Ω–∞—á–∏—Ç QR-–∫–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è
    if (response.status === 202) {
      const data = await response.json();

      // –ï—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –≤—ã–∑—ã–≤–∞–µ–º –µ–≥–æ
      if (typeof onGenerating === 'function') {
        onGenerating(data);
      }

      // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
      if (maxRetries <= 0) {
        console.warn('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è QR-–∫–æ–¥–∞');
        return null;
      }

      // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
      await new Promise(resolve => setTimeout(resolve, 15000));
      return getQrCode(instanceId, onGenerating, maxRetries - 1);
    }

    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ 200, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è QR-–∫–æ–¥–∞');
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ QR-–∫–æ–¥–∞:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showAlert(message, type = 'info') {
  // –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  let alertContainer = document.getElementById('alert-container');

  if (!alertContainer) {
    alertContainer = document.createElement('div');
    alertContainer.id = 'alert-container';
    alertContainer.style.position = 'fixed';
    alertContainer.style.top = '20px';
    alertContainer.style.right = '20px';
    alertContainer.style.zIndex = '1000';
    document.body.appendChild(alertContainer);
  }

  // –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  const alert = document.createElement('div');
  alert.className = `alert alert-${type}`;
  alert.style.marginBottom = '10px';
  alert.textContent = message;

  // –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
  const closeBtn = document.createElement('span');
  closeBtn.innerHTML = '&times;';
  closeBtn.style.marginLeft = '10px';
  closeBtn.style.float = 'right';
  closeBtn.style.fontWeight = 'bold';
  closeBtn.style.cursor = 'pointer';
  closeBtn.onclick = () => alertContainer.removeChild(alert);
  alert.appendChild(closeBtn);

  // –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  alertContainer.appendChild(alert);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    if (alertContainer.contains(alert)) {
      alertContainer.removeChild(alert);
    }
  }, 5000);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(dateString) {
  const date = new Date(dateString);
  try {
    return new Intl.DateTimeFormat('ru-RU', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    }).format(date);
  } catch (error) {
    console.error('Error formatting date:', error);
    return dateString;
  }
}

// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
function setupLogout() {
  const logoutBtn = document.getElementById('logout-btn');
  if (logoutBtn) {
    logoutBtn.addEventListener('click', (e) => {
      e.preventDefault();
      localStorage.removeItem('authToken');
      window.location.href = '/login';
    });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞
function logout() {
  localStorage.removeItem('authToken');
  localStorage.removeItem('apiKey');
  localStorage.removeItem('user');
  window.location.href = '/login';
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
function initNavbar() {
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  const userInfoElement = document.getElementById('user-info');

  if (userInfoElement && user.email) {
    userInfoElement.textContent = user.email;
  }

  const logoutBtn = document.getElementById('logout-btn');
  if (logoutBtn) {
    logoutBtn.addEventListener('click', (e) => {
      e.preventDefault();
      logout();
    });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL
function getUrlParam(param) {
  const urlParams = new URLSearchParams(window.location.search);
  return urlParams.get(param);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∏–∑ –ø—É—Ç–∏ URL (–¥–ª—è routes —Å :id)
function getIdFromPath() {
  const pathParts = window.location.pathname.split('/');
  const excludedPages = ['chat', 'contacts', 'details', 'messages'];

  // // –ò—â–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ä–µ–¥–∏ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö
  const pageIndex = pathParts.findIndex(part => excludedPages.includes(part));
  console.log("üöÄ ~ getIdFromPath ~ pageIndex:", pageIndex)

  // // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
  if (pageIndex > -1) {
    return pathParts[pageIndex - 1];
  }

  // –ï—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–µ—Ç–∞–ª–µ–π –∏–Ω—Å—Ç–∞–Ω—Å–∞, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
  if (pathParts.includes('instance') && pathParts.length > 2) {
    return pathParts[pathParts.length - 1];
  }

  return null;
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Å—Ç–∞–Ω—Å–∞ –≤ UI
function getStatusBadgeHTML(status) {
  const statusMap = {
    'connected': { class: 'status-connected', text: 'Connected' },
    'disconnected': { class: 'status-disconnected', text: 'Disconnected' },
    'connecting': { class: 'status-connecting', text: 'Connecting' },
    'qr_received': { class: 'status-qr-received', text: 'QR Code' },
    'logged_out': { class: 'status-disconnected', text: 'Logged Out' },
    'error': { class: 'status-disconnected', text: 'Error' }
  };

  const statusInfo = statusMap[status] || { class: '', text: status };

  return `<span class="status-badge ${statusInfo.class}">${statusInfo.text}</span>`;
}

function generateQRCodeImage(data, size = 200) {
  return `https://api.qrserver.com/v1/create-qr-code/?size=${size}x${size}&data=${encodeURIComponent(data)}`;
}

function getInstanceStatusInfo(status) {
  const statusMap = {
    'connected': {
      class: 'status-connected',
      text: '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ',
      description: '–ò–Ω—Å—Ç–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ WhatsApp –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.'
    },
    'disconnected': {
      class: 'status-disconnected',
      text: '–û—Ç–∫–ª—é—á–µ–Ω–æ',
      description: '–ò–Ω—Å—Ç–∞–Ω—Å –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç WhatsApp. –ù–∞–∂–º–∏—Ç–µ "–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å" –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.'
    },
    'connecting': {
      class: 'status-connecting',
      text: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ',
      description: '–ò–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WhatsApp. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.'
    },
    'qr_received': {
      class: 'status-qr-received',
      text: 'QR –ö–æ–¥',
      description: '–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ —Å –ø–æ–º–æ—â—å—é WhatsApp –Ω–∞ –≤–∞—à–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.'
    },
    'logged_out': {
      class: 'status-disconnected',
      text: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω',
      description: '–í—ã–ø–æ–ª–Ω–µ–Ω –≤—ã—Ö–æ–¥ –∏–∑ WhatsApp. –ù–∞–∂–º–∏—Ç–µ "–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å" –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.'
    },
    'error': {
      class: 'status-disconnected',
      text: '–û—à–∏–±–∫–∞',
      description: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ WhatsApp. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∂—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.'
    }
  };

  return statusMap[status] || {
    class: '',
    text: status,
    description: '–°—Ç–∞—Ç—É—Å –∏–Ω—Å—Ç–∞–Ω—Å–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω.'
  };
}

function formatPhoneNumber(number) {
  if (!number) return '';

  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ @s.whatsapp.net
  let cleaned = number.toString().replace(/\D/g, '').replace('@s.whatsapp.net', '').replace('@c.us', '');

  // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
  if (cleaned.length < 10) return cleaned;

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
  if (cleaned.startsWith('7') && cleaned.length === 11) {
    return `+${cleaned.substring(0, 1)} (${cleaned.substring(1, 4)}) ${cleaned.substring(4, 7)}-${cleaned.substring(7, 9)}-${cleaned.substring(9, 11)}`;
  }

  // –û–±—â–µ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  let result = '+';

  if (cleaned.length > 10) {
    result += cleaned.substring(0, cleaned.length - 10) + ' ';
    cleaned = cleaned.substring(cleaned.length - 10);
  }

  if (cleaned.length === 10) {
    result += `(${cleaned.substring(0, 3)}) ${cleaned.substring(3, 6)}-${cleaned.substring(6, 10)}`;
  } else {
    result += cleaned;
  }

  return result;
}

function getMessageTypeIcon(type) {
  switch (type) {
    case 'text': return 'üìù';
    case 'image': return 'üñºÔ∏è';
    case 'video': return 'üé¨';
    case 'audio': return 'üîä';
    case 'document': return 'üìÑ';
    case 'location': return 'üìç';
    case 'contact': return 'üë§';
    default: return 'üìã';
  }
}

function getMessageStatusHtml(status) {
  const statusMap = {
    'sent': { class: 'status-connecting', text: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' },
    'delivered': { class: 'status-connecting', text: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ' },
    'read': { class: 'status-connected', text: '–ü—Ä–æ—á–∏—Ç–∞–Ω–æ' },
    'failed': { class: 'status-disconnected', text: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏' }
  };

  const statusInfo = statusMap[status] || { class: '', text: status };

  return `<span class="status-badge ${statusInfo.class}">${statusInfo.text}</span>`;
}

async function updateInstanceStatus(instanceId, statusElement) {
  try {
    const statusData = await fetchAPI(`/whatsapp/${instanceId}/status`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    statusElement.innerHTML = getStatusBadgeHTML(statusData.status);

    return statusData.status;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
    return null;
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showAlert(message, type = 'info', duration = 3000) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  let alertContainer = document.querySelector('.alert-container');

  // –ï—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
  if (!alertContainer) {
    alertContainer = document.createElement('div');
    alertContainer.className = 'alert-container';
    document.body.appendChild(alertContainer);
  }

  // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const alertElement = document.createElement('div');
  alertElement.className = `alert alert-${type}`;
  alertElement.textContent = message;

  // –î–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  alertContainer.appendChild(alertElement);

  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
  setTimeout(() => {
    alertElement.classList.add('show');
  }, 10);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
  setTimeout(() => {
    alertElement.classList.remove('show');

    // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
      alertContainer.removeChild(alertElement);
    }, 300);
  }, duration);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
  initNavbar();
});